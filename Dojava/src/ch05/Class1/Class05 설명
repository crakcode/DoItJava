클래스와 객체1

- 함수 호출과 스택 메모리 
함수 호출 시 그함수만을 위한 메모리 공간이 할당된다.
add 호출시 발생하는 알고리즘을 나타내면 이렇다 .

int add(int num1,int num2){
	
	
함수가 호출되면 그함수가 사용할 메모리공간이 스택에 생성
main함수에 만들어지고 이후 사용할 매개변수 값을 스택에 형성되어서 
리턴값을 반환하고 사용된 메모리공간은다시 반환된다. 


- 함수의 장점
-1. 기능을 나누어 코드를 효율적 구현이 가능함	
-2. 매번 코드로 만들지 않고 그 기능의 함수를 호출하면 되니 편리하다.


-$ 메서드를 구현해 보자 !

학생이름을 반환하는 메서드 
String name;

String getName(){
	return name;
}

학생이름을 매개변수로 입력받아 초기화 하는경우

String setName(String name){
	this.name=name;
}



- ** 중요 자바이름 짓기 규약
- 클래스이름은 대문자로 시작해야 한다.
- 하나의 자바 파일에 클래스가 여러개있을수도 있지만  
public 클래스 이름과 자바 파일 이름은 같아야 한다. 

- 패키지 이름은 모두 소문자로 만든다. 변수와 메서드 이름은 소문자로 시작하며
이름이 길어지는 경우에은 중간에 새단어로 바뀔대마다 대문자를 써줌으로서 가독성을 높인다.



- new 예약어로 클래스 생성하기

클래스형 변수 이름 = new 생성자;
Student stu=new Student();

Student 클래스로 생성하고 stu에 대입한다는 뜻이다.
stu는 변수이며 이 변수가 인스턴스이다 .

- 인스턴스와 참조변수
객체: 의사나 행위가 미치는 대상 이를 코드로 구현한것이 클래스
인스턴스: 클래스를 구체화한것이 인스턴스이다 .



- 인스턴스와힙	 메모리 
Student stu=new Student();

스택 메모리: stu 저장
힙 메모리: Student 클래스 생성


         Student stu1=new Student();
		 stu1.name="박동팔";
		 
		 Student stu2=new Student();
		 stu2.name="호식이";
		 
		 
		 System.out.println(stu1);
		 System.out.println(stu2);
객체의 주소를 나타낸다. 
클래스 이름@주소값을 나타낸다
주소 값은 다른 말로 해시 코드 값이라고 한다. 
즉 자바 가상 머신에서 객체가 생성되었을때 생성된 객체에 할당하는 가상
주소 값이다. 

ch05.Class1.Student@5b6f7412

ch05.Class1.Student@27973e9b




- 생성자
Person p=new Person();
Person(); 이부분이 생성자를 나타낸다. 
원래는 따로 디폴트 생성자로 되어있지만 만일 생성자를 생성할떄 
매개변수를 넣어서 생성하는경우 빈값으로 인스턴스 생성시 문제가 발생한다. 

생성자는 Person클래스이면 같게 클래스명과 동일하게 가져온다. 


- 참조 자료형

기본자료형: 크기가 정해진 기본 자료형 int char float double

클래스를 변수로 선언하여 사용 


- 정보은닉 
public 
private: 외부클래스에서 접속이 불가능하다. 
따라서 private 로 선언된것에는 get,setter를 선언하여 접근하여야한다. 


private String name;
해당 값에 접근을 외부 클래스에서 할수있도록 
public getName(){
	return name;
}
public setName(String name){
	this.name=name;
}






//CH5 연습문제

- 클래스를 생성할때 호출하는 '생성자'는 멤버 변수를 초기화하는데 사용합니다.
- 클래스를 생성하여 메모리에 있는 상태를 '인스턴스' 멤버변수를 다른 말로
' ' 라고 합니다.




 